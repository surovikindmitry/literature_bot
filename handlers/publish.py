from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from handlers.description import DescriptionState
from keyboards.main_menu import main_keyboard
from config import config

router = Router()


# ... (–∏–º–ø–æ—Ä—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ)

@router.message(F.text == "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
async def publish_to_channel(message: Message, state: FSMContext):
    data = await state.get_data()
    formatted_text = data.get('formatted_text')
    photo = data.get('photo')

    if not formatted_text:
        await message.answer("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    try:
        if photo:
            await message.bot.send_photo(
                chat_id=config.ADMIN_CHANNEL_ID,
                photo=photo,
                caption=formatted_text,
                parse_mode="HTML"
            )
        else:
            await message.bot.send_message(
                chat_id=config.ADMIN_CHANNEL_ID,
                text=formatted_text,
                parse_mode="HTML"
            )

        await message.answer(
            "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!",
            reply_markup=main_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}",
            reply_markup=main_keyboard()
        )

    await state.clear()


@router.message(F.text == "–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è")
async def request_image(message: Message, state: FSMContext):
    await message.answer(
        "üñº –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ø–æ—Å—Ç—É.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(DescriptionState.waiting_for_image)


@router.message(DescriptionState.waiting_for_image, F.photo)
async def process_image(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    data = await state.get_data()

    await state.update_data(photo=photo)

    await message.answer_photo(
        photo,
        caption=data['formatted_text'],
        parse_mode="HTML",
        reply_markup=description_keyboard()
    )

    await state.set_state(DescriptionState.waiting_for_edit)


@router.message(F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def request_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    await message.answer(
        "‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(DescriptionState.waiting_for_edit)


@router.message(DescriptionState.waiting_for_edit, F.text)
async def process_edit(message: Message, state: FSMContext):
    edited_text = message.text
    data = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    formatted_text = (
        f"<b><font color='#00e600'>{data['book']} - {data['author']}</font></b>\n\n"
        f"<b><i>\"{extract_quote(edited_text)}\"</i></b>\n\n"
        f"{extract_description(edited_text)}"
    )

    await state.update_data(formatted_text=formatted_text, raw_text=edited_text)

    if data.get('photo'):
        await message.answer_photo(
            data['photo'],
            caption=formatted_text,
            parse_mode="HTML",
            reply_markup=description_keyboard()
        )
    else:
        await message.answer(
            formatted_text,
            parse_mode="HTML",
            reply_markup=description_keyboard()
        )

    await state.set_state(DescriptionState.waiting_for_edit)