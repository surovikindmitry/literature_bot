import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton  # –î–æ–±–∞–≤–ª–µ–Ω–æ
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.main_menu import main_keyboard
from keyboards.description_menu import description_keyboard
import aiohttp
from config import config

router = Router()

class DescriptionState(StatesGroup):
    waiting_for_book = State()
    waiting_for_edit = State()
    waiting_for_image = State()

@router.message(F.text == "–ù–∞—á–∞—Ç—å")
async def start_description(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\n"
        "–∏–ª–∏\n"
        "–ê–≤—Ç–æ—Ä \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\"",
        reply_markup=ReplyKeyboardRemove()  # –£–±—Ä–∞–Ω–æ types.
    )
    await state.set_state(DescriptionState.waiting_for_book)

@router.message(DescriptionState.waiting_for_book)
async def process_book(message: Message, state: FSMContext):
    input_text = message.text.strip()

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –∫–∞–≤—ã—á–∫–∞–º –∏–ª–∏ –¥–µ—Ñ–∏—Å—É —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤
    if '"' in input_text:
        parts = re.split(r'"(.+?)"', input_text)  # –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        if len(parts) >= 3:
            author = parts[0].strip()
            book = parts[1].strip()
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ê–≤—Ç–æ—Ä \"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\"")
            return
    else:
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–µ—Ñ–∏—Å—É/—Ç–∏—Ä–µ, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞–≤—ã—á–µ–∫
        parts = re.split(r'\s*[-‚Äî]\s*', input_text, maxsplit=1)
        if len(parts) == 2:
            author, book = parts[0].strip(), parts[1].strip()
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(author) < 2 or len(book) < 2:
        await message.answer("‚ùå –ê–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(author=author, book=book)

    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ:\n–ê–≤—Ç–æ—Ä: {author}\n–ö–Ω–∏–≥–∞: {book}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—Ä–æ—Å' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=markup
    )

@router.message(F.text == "–ó–∞–ø—Ä–æ—Å")
async def make_ai_request(message: Message, state: FSMContext):
    data = await state.get_data()
    author = data.get('author')
    book = data.get('book')

    prompt = config.AI_PROMPT.format(book=book, author=author)

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ...")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Authorization": f"Bearer {config.OPENROUTER_API_KEY}",
                        "Content-Type": "application/json"
                    },
                    json={
                        "model": config.AI_MODEL,
                        "messages": [{"role": "user", "content": prompt}]
                    }
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    ai_response = result['choices'][0]['message']['content']

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    formatted_text = format_ai_response(book, author, ai_response)

                    await state.update_data(
                        formatted_text=formatted_text,
                        raw_text=ai_response,
                        photo=None
                    )
                    await message.answer(
                        formatted_text,
                        parse_mode="HTML",
                        reply_markup=description_keyboard()
                    )
                else:
                    error = await response.text()
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {error}",
                        reply_markup=main_keyboard()
                    )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}",
            reply_markup=main_keyboard()
        )

    await state.set_state(DescriptionState.waiting_for_edit)


def format_ai_response(book, author, ai_response):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ç–∞—Ç—É (–ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö)
    quote_match = re.search(r'"([^"]*)"', ai_response)
    quote = quote_match.group(1) if quote_match else "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏"

    # –û–ø–∏—Å–∞–Ω–∏–µ - –≤—Å—ë –ø–æ—Å–ª–µ —Ü–∏—Ç–∞—Ç—ã
    description = ai_response[quote_match.end() + 1:] if quote_match else ai_response
    description = description.strip()

    return (
        f"<b>üìñ {book}</b>\n"
        f"<i>‚úçÔ∏è {author}</i>\n\n"
        f"<b><i>üìå \"{quote}\"</i></b>\n\n"
        f"{description}"
    )
def extract_quote(text):
    quote_match = re.search(r'"([^"]*)"', text)
    return quote_match.group(1) if quote_match else "–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏"

def extract_description(text):
    parts = re.split(r'"[^"]*"', text, 1)
    return parts[-1].strip() if len(parts) > 1 else text